"""Clean up database schema to match User model

Revision ID: 88c483143439
Revises: fb711332d4d2
Create Date: 2025-09-15 12:21:04.056488

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '88c483143439'
down_revision: Union[str, None] = 'fb711332d4d2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('verification_tokens_identifier_token_key', table_name='verification_tokens')
    op.drop_index('verification_tokens_token_key', table_name='verification_tokens')
    op.drop_table('verification_tokens')
    op.drop_index('accounts_provider_provider_account_id_key', table_name='accounts')
    op.drop_table('accounts')
    op.drop_index('sessions_session_token_key', table_name='sessions')
    op.drop_table('sessions')
    op.alter_column('users', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False,
               postgresql_using='id::uuid')
    op.alter_column('users', 'image',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('users', 'password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=True)
    op.alter_column('users', 'reset_password_token',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('users_email_key', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_column('users', 'email_verified')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('email_verified', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.alter_column('users', 'reset_password_token',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'image',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_table('sessions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('session_token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_index('sessions_session_token_key', 'sessions', ['session_token'], unique=True)
    op.create_table('accounts',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider_account_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='accounts_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='accounts_pkey')
    )
    op.create_index('accounts_provider_provider_account_id_key', 'accounts', ['provider', 'provider_account_id'], unique=True)
    op.create_table('verification_tokens',
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False)
    )
    op.create_index('verification_tokens_token_key', 'verification_tokens', ['token'], unique=True)
    op.create_index('verification_tokens_identifier_token_key', 'verification_tokens', ['identifier', 'token'], unique=True)
    # ### end Alembic commands ###
